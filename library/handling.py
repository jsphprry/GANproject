# libraries
import mnist
import numpy as np
from PIL import Image
import random




## labelers

# column vector of zeros where index [class_type][0] == 1.0
def classLabel(class_type, n_classes):
	l = np.zeros((n_classes,1))
	l[class_type][0] = 1.0
	return l




## dataset loading

# lood mnist as list of x,y pairs
def loadMNIST(directory, shape):
	print("Loading local MNIST...")
	images, labels = mnist.MNIST(directory).load_training() # (60000, 784), (60000, 1)
	print("Done.")
	
	data_x = [np.array(i).reshape(*shape) / 255 for i in images]
	data_y = [classLabel(y,10) for y in labels]
	return list(zip(data_x,data_y))

# load mnist as list of images
def loadMNIST_images(directory, shape):
	print("Loading local MNIST images...")
	images,_ = mnist.MNIST(directory).load_training() # (60000, 784), (60000, 1)
	print("Done.")

	return [np.array(i).reshape(*shape) / 255 for i in images]

# load digits data with labels
def loadDigits():
	data = []
	for i,d in enumerate(digits):
		data.append((d,classLabel(i,10)))
	
	return data




## shape processing

# split data into n_batches size list of batch_size lists
def shuffleSplit(data, n_batches):
	batch_size = int(len(data) / n_batches)
	
	random.shuffle(data)
	batched_data = [data[k:k+batch_size] for k in range(0, len(data), batch_size)]
	
	return batched_data



## filesystem operations

# save img in images to filesystem as pngs
def saveImages(images, direc, msg1, msg2):
	print(msg1)
	print(str(len(images))+" images to save")
	
	for i, img in enumerate(images):
		Image.fromarray(img * 255).convert('RGB').resize((250,250), Image.Resampling.BOX).save(direc+str(i)+".png")
	
	print(msg2)




## data

true_image = np.array([[
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,1,1,1,1,1,1,0,0],
	[0,0,1,1,0.5,0.5,0.5,1,0,0],
	[0,0,1,0.5,1,0.5,0.5,1,0,0],
	[0,0,1,0.5,0.5,1,0.5,1,0,0],
	[0,0,1,0.5,0.5,0.5,1,1,0,0],
	[0,0,1,1,1,1,1,1,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0]]])

digits = [
	np.array([[ # 0
	[0,0,1,1,1,1,1,1,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,0,1,1,1,1,1,1,0,0]]]),
	np.array([[ # 1
	[0,0,0,0,1,1,0,0,0,0],
	[0,0,0,1,1,1,0,0,0,0],
	[0,0,1,1,1,1,0,0,0,0],
	[0,0,0,0,1,1,0,0,0,0],
	[0,0,0,0,1,1,0,0,0,0],
	[0,0,0,0,1,1,0,0,0,0],
	[0,0,0,0,1,1,0,0,0,0],
	[0,0,0,0,1,1,0,0,0,0],
	[0,0,1,1,1,1,1,1,0,0],
	[0,0,1,1,1,1,1,1,0,0]]]),
	np.array([[ # 2
	[0,0,1,1,1,1,1,1,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,0,0,0,0,0,1,1,0,0],
	[0,0,0,0,0,1,1,0,0,0],
	[0,0,0,0,1,1,0,0,0,0],
	[0,0,0,1,1,0,0,0,0,0],
	[0,0,1,1,0,0,0,0,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,1,1,1,1,1,1,0]]]),
	np.array([[ # 3
	[0,0,1,1,1,1,1,1,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,0,0,0,0,0,0,1,1,0],
	[0,0,0,0,1,1,1,1,0,0],
	[0,0,0,0,1,1,1,1,0,0],
	[0,0,0,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,0,1,1,1,1,1,1,0,0]]]),
	np.array([[ # 4
	[0,0,0,0,0,1,1,1,0,0],
	[0,0,0,0,1,1,1,1,0,0],
	[0,0,0,1,1,1,1,1,0,0],
	[0,0,1,1,0,0,1,1,0,0],
	[0,1,1,0,0,0,1,1,0,0],
	[0,1,1,0,0,0,1,1,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,0,0,0,0,0,1,1,0,0],
	[0,0,0,0,0,0,1,1,0,0]]]),
	np.array([[ # 5
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,0,0,0,0,0,0,0],
	[0,1,1,0,0,0,0,0,0,0],
	[0,1,1,1,1,1,1,1,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,0,0,0,0,0,0,1,1,0],
	[0,0,0,0,0,0,0,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,1,1,1,1,1,0,0]]]),
	np.array([[ # 6
	[0,0,1,1,1,1,1,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,0,0,0,0,0,0,0],
	[0,1,1,0,0,0,0,0,0,0],
	[0,1,1,1,1,1,1,1,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,0,1,1,1,1,1,1,0,0]]]),
	np.array([[ # 7
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,0,0,0,0,0,0,1,1,0],
	[0,0,0,0,0,0,1,1,1,0],
	[0,0,0,0,0,1,1,1,0,0],
	[0,0,0,0,1,1,1,0,0,0],
	[0,0,0,1,1,1,0,0,0,0],
	[0,0,1,1,1,0,0,0,0,0],
	[0,1,1,1,0,0,0,0,0,0],
	[0,1,1,0,0,0,0,0,0,0]]]),
	np.array([[ # 8
	[0,0,1,1,1,1,1,1,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,0,1,1,1,1,1,1,0,0],
	[0,0,1,1,1,1,1,1,0,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,0,1,1,1,1,1,1,0,0]]]),
	np.array([[ # 9
	[0,0,1,1,1,1,1,1,0,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,1,1,0,0,0,0,1,1,0],
	[0,0,1,1,1,1,1,1,1,0],
	[0,0,0,0,0,0,0,1,1,0],
	[0,0,0,0,0,0,0,1,1,0],
	[0,1,1,1,1,1,1,1,1,0],
	[0,1,1,1,1,1,1,1,0,0]]])]
